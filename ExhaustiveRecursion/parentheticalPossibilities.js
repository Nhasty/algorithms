// Write a function, parentheticalPossibilities, that takes in a string as an argument. The function should return an array containing all of the strings that could be generated by expanding all parentheses of the string into its possibilities.

// For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.

const parentheticalPossibilities = (s) => {
  // todo
  if (!s.length) {
    return [''];
  }
  const allPossibilities = []
  const {choices, remainder} = getChoices(s);
  for (let choice of choices) {
    const remainderPossibilites = parentheticalPossibilities(remainder);
    for (let remains of remainderPossibilites) {
      allPossibilities.push(choice + remains)
    }
  }
  return allPossibilities;
};

const getChoices = (s) => {
  if (s[0] === '(') {
    const end = s.indexOf(')');
    const choices = s.slice(1, end);
    const remainder = s.slice(end + 1);
    return {
      choices,
      remainder,
    }
  } else {
    return {
      choices: s[0],
      remainder: s.slice(1)
    };
  }
}